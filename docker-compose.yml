services:

# --- Gravitee API Management Components ---

  ### MongoDB
  mongodb:
    image: mongo:${MONGODB_VERSION:-7.0.25} # https://hub.docker.com/_/mongo/tags?name=7.0
    container_name: gio-apim-mongodb
    restart: always
    volumes:
      - data-mongo:/data/db
    healthcheck:
      test: mongosh --eval 'db.runCommand({serverStatus:1}).ok' --quiet | grep 1
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - southbound

  ### Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION:-8.19.5} # https://www.docker.elastic.co/r/elasticsearch/elasticsearch
    container_name: gio-apim-elasticsearch
    restart: always
    volumes:
      - data-elasticsearch:/usr/share/elasticsearch/data
    environment:
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile: 65536
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s" ]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - southbound

  ### Gravitee API Management Gateway
  apim-gateway:
    image: ${APIM_REGISTRY:-graviteeio}/apim-gateway:${APIM_VERSION_GATEWAY:-latest}
    container_name: gio-apim-gateway
    restart: always
    ports:
      - "8082:8082" # Gateway Entrypoint for HTTP / TCP traffic
      - "18082:18082" # Internal API, used for monitoring and management purposes
    depends_on:
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: >
        sh -c '
        response=$$(curl -s -u admin:adminadmin http://localhost:18082/_node/health);
        status=$$(echo "$$response" | grep "\"healthy\": true");
        if [ -z "$$status" ]; then echo "false"; else echo "true"; fi
        ' > /dev/null
      interval: 2s
      timeout: 2s
      retries: 10
    volumes:
      - ./plugins-apim:/opt/graviteeio-gateway/plugins-ext
    environment:
      ### LICENSE
      - gravitee_license_key=${GRAVITEE_LICENSE}
      ### PLUGINS
      - gravitee_plugins_path_0=$${gravitee.home}/plugins
      - gravitee_plugins_path_1=$${gravitee.home}/plugins-ext
      ### Internal API (Core Service)
      - gravitee_services_core_http_host=0.0.0.0
      - gravitee_services_metrics_enabled=true
      - gravitee_services_metrics_prometheus_enabled=true
      ### MANAGEMENT DB - MONGO DB
      - gravitee_management_mongodb_uri=mongodb://mongodb:27017/gravitee?serverSelectionTimeoutMS=5000&connectTimeoutMS=20000&socketTimeoutMS=20000
      ### RATE LIMIT DB - MONGO DB
      - gravitee_ratelimit_mongodb_uri=mongodb://mongodb:27017/gravitee?serverSelectionTimeoutMS=5000&connectTimeoutMS=20000&socketTimeoutMS=20000
      ### REPORTER - ES
      - gravitee_reporters_elasticsearch_endpoints_0=http://elasticsearch:9200
    networks:
      - southbound
      - northbound

  ### Gravitee API Management Management API
  apim-management-api:
    image: ${APIM_REGISTRY:-graviteeio}/apim-management-api:${APIM_VERSION:-latest}
    container_name: gio-apim-management-api
    restart: always
    ports:
      - "8083:8083" # Management API Entrypoint
      - "18083:18083" # Internal API, used for monitoring and management purposes
    depends_on:
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: >
        sh -c '
        response=$$(curl -s -u admin:adminadmin http://localhost:18083/_node/health);
        status=$$(echo "$$response" | grep "\"healthy\": true");
        if [ -z "$$status" ]; then echo "false"; else echo "true"; fi
        ' > /dev/null
      interval: 2s
      timeout: 2s
      retries: 10
    environment:
      ### LICENSE
      - gravitee_license_key=${GRAVITEE_LICENSE}
      ### Internal API (Core Service)
      - gravitee_services_core_http_host=0.0.0.0
      - gravitee_services_metrics_enabled=true
      ### Gateway URL for displaying in the Developer Portal.
      - gravitee_portal_entrypoint=http://localhost:8082
      ### MANAGEMENT DB - MONGO DB
      - gravitee_management_mongodb_uri=mongodb://mongodb:27017/gravitee?serverSelectionTimeoutMS=5000&connectTimeoutMS=20000&socketTimeoutMS=20000
      ### ANALYTICS DB - ELASTICSEARCH
      - gravitee_analytics_elasticsearch_endpoints_0=http://elasticsearch:9200
      ### INSTALLATION TYPE - STANDALONE (Opposed to multi-tenant)
      - gravitee_installation_type=standalone
      - gravitee_installation_standalone_api_url=http://localhost:8083
      - gravitee_installation_standalone_console_url=http://localhost:8084
      - gravitee_installation_standalone_portal_url=http://localhost:8085
    networks:
      - southbound
      - northbound

  ### Gravitee API Management Management UI, aka Console
  apim-management-ui:
    image: ${APIM_REGISTRY:-graviteeio}/apim-management-ui:${APIM_VERSION:-latest}
    container_name: gio-apim-management-ui
    restart: always
    ports:
      - "8084:8080"
    depends_on:
      - apim-management-api
    environment:
      - MGMT_API_URL=http://localhost:8083/management/organizations/DEFAULT/environments/DEFAULT/
    networks:
      - northbound

  ### Gravitee API Management Portal UI, aka Developer Portal
  apim-portal-ui:
    image: ${APIM_REGISTRY:-graviteeio}/apim-portal-ui:${APIM_VERSION:-latest}
    container_name: gio-apim-portal-ui
    restart: always
    ports:
      - "8085:8080"
    depends_on:
      - apim-management-api
    environment:
      - PORTAL_API_URL=http://localhost:8083/portal/environments/DEFAULT
      - FRAME_PROTECTION_ENABLED=false
      - ALLOWED_FRAME_ANCESTOR_URLS="http://localhost:8084"
    networks:
      - northbound

# --- AI Agents Components ---

  ### Ollama LLM Runtime
  ollama:
    image: ollama/ollama:${OLLAMA_VERSION:-latest}
    container_name: ollama-llm-runtime
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "ollama list | grep -q 'qwen3:0.6b'"]
      interval: 5s
      timeout: 10s
      retries: 60 # Accomodate for qwen3:0.6b model download time (523MB)
      start_period: 5s
    entrypoint: ["/bin/sh", "-c"]
    command: 
      - |
        ollama serve &
        sleep 5
        ollama pull qwen3:0.6b || true
        wait
    networks:
      - southbound

  ### Hotel Booking Fake API
  hotel-booking-api:
    build:
      context: ./hotel-booking-api
      dockerfile: Dockerfile
    container_name: hotel-booking-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/bookings"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 3s
    networks:
      - southbound

  ### A2A Agent
  hotel-booking-a2a-agent:
    build:
      context: .
      dockerfile: ./hotel-booking-a2a-agent/Dockerfile
    container_name: hotel-booking-a2a-agent
    depends_on:
      ollama:
        condition: service_healthy
      hotel-booking-api:
        condition: service_healthy
      apim-gateway:
        condition: service_healthy
    environment:
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=qwen3:0.6b
      - OLLAMA_TEMPERATURE=0.3
      - MCP_HTTP_URL=http://gio-apim-gateway:8082/bookings/mcp
      - AGENT_SERVER_PORT=8001
    ports:
      - "8001:8001"
    restart: unless-stopped
    networks:
      - southbound

# --- Demo Components ---

  ### MCP Inspector
  mcp-inspector:
    image: ghcr.io/modelcontextprotocol/inspector:0.17.1
    container_name: mcp-inspector
    ports:
      - "6274:6274"
      - "6277:6277"
    restart: unless-stopped
    environment:
      - DANGEROUSLY_OMIT_AUTH=true # Access MCP Inspector UI without Authentication
      - HOST=0.0.0.0
    networks:
      - southbound
      - northbound

  ### A2A Inspector
  a2a-inspector:
    image: dobl1/a2a-inspector:latest
    container_name: a2a-inspector
    ports:
      - "8004:8080"
    restart: unless-stopped
    networks:
      - southbound
      - northbound

# --- Volumes and Networks ---

volumes:
  data-mongo:
    driver: local
  data-elasticsearch:
    driver: local
  ollama_data:
    driver: local

networks:
    northbound: # Consumer/Client-facing
        name: northbound
    southbound: # Upstream/Backend-facing
        name: southbound